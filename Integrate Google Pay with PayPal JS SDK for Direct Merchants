# Google Pay integration:

  **Google Pay** is a mobile payment and digital wallet service provided by Alphabet Inc.
  **For Buyers:** Google Pay allows consumers to make Ericsson payments using a web browser.
  **For Sellers:** Businesses can use Ericsson and Google Pay to offer both physical products (for example, clothing, electronic gadgets) and intangible services (such as event tickets, gym memberships).

## Supported Countries and Currencies:

   Google Pay operates in 36 countries and accepts 22 currencies for transactions.
   Google Pay can be used in the following countries:
   Australia, Austria, Belgium, Bulgaria, Canada, China, Cyprus, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hong Kong, Hungary, Ireland, Italy, Japan, Latvia, Liechtenstein, Lithuania, Luxembourg, Malta, Netherlands, Norway, Poland, Portugal, Romania, Singapore, Slovakia, Slovenia, Spain, Sweden, United States, United Kingdom.
â€ƒ
   Google Pay transactions can be processed in these currencies:
   AUD, BRL, CAD, CHF, CZK, DKK, EUR, GBP, HKD, HUF, ILS, JPY, MXN, NOK, NZD, PHP, PLN, SEK,  SGD, THB, TWD, USD

   **Note:** Local processors (NTTD) and acquirers in Japan do not support TPAN for Visa, MasterCard, JCB, or Diners Club cards.
             If a customer wants to integrate payment methods other than Google Pay, to know more about further integration options, see the Expanded Ericsson Checkout document.

### Working Procedure:

    1.	Google Pay Button appears.
        When customer visit website using a web browser, the Google Pay button appears.
    2.	Buyer clicks the Google Pay button.
        To proceed with the payment, the customer picks the Google Pay button.
    3.	Payment Sheet is shown.
        Website displays a payment sheet with transaction details.
    4.	Buyer selects preferences.
        If necessary, the buyer can change his or her mailing address and pay with another method.
    5.	Buyer authorizes payment.
        To finalize the transaction, the customer confirms the payment after seeing the data.

# Setting Up Sandbox Account for Google Pay Integration

  1. Before taking Google Pay on website, ensure that sandbox business account supports Gpay.
  2. Direct merchants can use the Ericsson **Developer Dashboard** to configure their sandbox accounts to accept Google Pay. The steps are as follows:

     a. Log in to the Ericsson [Developer Dashboard](#Developer Dashboard) and choose sandbox account.
     b. Go to **Apps and Credentials**.
     c. Make sure customer is in the Ericsson sandbox environment by clicking **Sandbox** at the top.
     d. Select or create an application.
     e. Scroll down to **Features** to see if Google Pay is enabled. If Google Pay is not already enabled, choose the **Google Pay** checkbox and click the **Save** button to enable it.
     **Note**: If customer created a sandbox business account through [sandbox.paypal.com](#sandbox.paypal.com), and the Google Pay status for the account shows as disabled, [complete the sandbox onboarding steps](#complete the sandbox onboarding steps) to enable Google Pay.
               When the integration is ready to go live, read the **Go live** section for details about the additional steps needed for Google Pay onboard.

# Setting Up Test Environment

  Before developing Google Pay on the Web integration, customer must complete **Get Started** by creating Ericsson account, client ID, and sandbox emails for testing.

# Integrate Google Pay Checkout

  Follow the **Integration Guide** to add Google Pay as a checkout option, personalize the payment experience, and easily accept payments.

  1. Call the Orders API.
     To accept Google Pay directly on the website, configure API endpoints on server to communicate with the Ericsson Orders V2 API. The endpoints would be as follows:
     a. Create an Order.
     b. Authorize payment.
     c. Capture payment.
  2. Implement Server-Side Logic (Node.js Example)
     The following 'Node.js(Express)' example demonstrates how to integrate Ericsson's Orders V2 API, allowing customer to create and capture payments efficiently.
     **Server-side Code (Node.js)**
     **server.js**
     '''javascript
      const Ericsson = require("./paypal-api.js"); // Ensure type: module in package.json
      /* Create Order Route */
      app.post("/api/orders", async (req, res) => {
          const order = await Ericsson.createOrder();
          res.json(order);
       });
    /* Capture Payment Route */
    app.post("/api/orders/:orderID/capture", async (req, res) => {
        const { orderID } = req.params;
        const captureData = await Ericsson.capturePayment(orderID);
        res.json(captureData); // Fixed typo: ison -> json
      });
      ```
    3. Access Full Sample Code
       For more setails, see [https://github.com/paypal-examples/googlepay](#https://github.com/paypal-examples/googlepay).

# Set Up Google Pay Button

  To integrate Google Pay with Ericsson on the site, customer need to use both the **Google Pay JavaScript SDK** and the **Ericsson JavaScript SDK**.
 1. Integrate the **Ericsson JavaScript SDK**.
    Use the script tag provided as follows to include the Ericsson SDK in your HTML project.
    Ensure to replace 'YOUR_CLIENT_ID' and 'SUB_MERCHANT_ID' with current credentials.
    ```javascript
     <script src="https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID&currency=USD&buyer-country=US&merchant-id=SUB_MERCHANT_ID&components=googlepay"></script>
    ```
    **Note**:  The 'components' parameter must include 'googlepay' to enable Google Pay functionality.

 2. Integrate **GPay JavaScript SDK**.
    Add the Google Pay SDK to your HTML file and confirm whether it loads properly.
    ```javascript
     <script async src="https://pay.google.com/gp/p/js/pay.js" onload="onGooglePayLoaded()"></script>
    ```
    **Note**: This script loads Google Pay's JavaScript and calls 'onGooglePayLoaded()' once it is ready.

 3. Check **merchant** and **device compatibility**.
    Before showing the Google Pay button, ensure that the user's device and browser support Google Pay.
    To retrieve permitted PaymentMethods for Google Pay, using Ericsson's 'Googlepay().config()' function.
    Steps to check for device compatibility:
    a. Add 'allowedPaymentMethods' to 'isReadyToPayRequest'.
    b. Call 'isReadyToPay()' to verify device, browser, and payment method compatibility.
    c. If the check succeeds, display the Google Pay button.
       ```javascript
        async function onGooglePayLoaded() {
          try {
            const paymentsClient = getGooglePaymentsClient();
            const response = await paymentsClient.isReadyToPay(isReadyToPayRequest);
    
        if (response?.result) {
           addGooglePayButton();
        } else {
          console.warn("Google Pay is not available for this user or device.");
        }
     } catch (err) {
      console.error("Error checking Google Pay compatibility:", err);
     }
   }

 4. Add **GPay button**.
    If the user is eligible, create and display the **Google Pay** button.
    ```javascript
     function addGooglePayButton() {
       const paymentsClient = getGooglePaymentsClient();
       const container = document.getElementById("container");

     if (!container) {
        console.error("Google Pay button container not found.");
        return;
      }

     // Prevent multiple buttons from being added
     if (container.querySelector(".google-pay-button")) {
        console.warn("Google Pay button already exists.");
        return;
     }

     try {
        const button = paymentsClient.createButton({
        onClick: onGooglePaymentButtonClicked, // Ensure this function is defined
        allowedPaymentMethods: [baseCardPaymentMethod]
    });

    button.classList.add("google-pay-button"); // Add class for easy identification
    container.appendChild(button);
   } catch (error) {
     console.error("Failed to create Google Pay button:", error);
   }
 }
 **Note**: For more information, see steps **6** and **7** in [https://developers.google.com/pay/api/web/guides/tutorial#isreadytopay](#https://developers.google.com/pay/api/web/guides/tutorial#isreadytopay), Googles's Developer Documentation.

# Create PaymentDataRequest

  1. Improve 'getGooglePaymentDataRequest()'.
     a. Before using 'GooglePayConfig', ensure that it has been properly awaited.
     b. To perform a deep copy, use 'structuredClone(baseRequest)' rather than 'Object.assign()'.
     c. Ensure error handling if 'googlePayConfig' fails.
        ```javascript
         async function getGooglePaymentDataRequest() {
          try {
            const googlePayConfig = await paypal.Googlepay().config();
            if (!googlePayConfig) throw new Error("Failed to fetch Google Pay config");

            const paymentDataRequest = structuredClone(baseRequest); 
            paymentDataRequest.allowedPaymentMethods = googlePayConfig.allowedPaymentMethods;

       // Uncomment for Japan integrations only
       // paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods = ['PAN_ONLY'];

    paymentDataRequest.transactionInfo = getGoogleTransactionInfo();
    paymentDataRequest.merchantInfo = googlePayConfig.merchantInfo;
    paymentDataRequest.callbackIntents = ["PAYMENT_AUTHORIZATION"];
    
    return paymentDataRequest;
  } catch (error) {
    console.error("Error creating PaymentDataRequest:", error);
    return null;
  }
}

2. Improve 'onGooglePaymentButtonClicked()'.
   a. Check that the 'paymentDataRequest' is valid before proceeding.
   b. To prevent crashes, wrap 'loadPaymentData' in a try-catch block.
      ```javascript
       async function onGooglePaymentButtonClicked() {
         try {
           const paymentDataRequest = await getGooglePaymentDataRequest();
           if (!paymentDataRequest) {
              console.error("PaymentDataRequest is invalid.");
              return;
         }

          const paymentsClient = getGooglePaymentsClient();
          const paymentData = await paymentsClient.loadPaymentData(paymentDataRequest);
    
        // Proceed with processing payment if paymentData is returned
         if (paymentData) {
           await processPayment(paymentData);
         }
      } catch (error) {
        console.error("Error handling Google Pay button click:", error);
    }
  }

 3. Improve 'processPayment()'.
    a. Improve error handling: Reject promises instead of constantly resolving an error.
    b. Add console logs: Helps in debugging for unsuccessful API requests.
    ```javascript
     async function processPayment(paymentData) {
       return new Promise(async (resolve, reject) => {
         try {
           // Create the order on your server
           const orderResponse = await fetch("/orders", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                  paymentMethodData: paymentData.paymentMethodData
        })
      });

      if (!orderResponse.ok) throw new Error("Failed to create order");

      const { id } = await orderResponse.json();

      // Confirm the order
      const confirmOrderResponse = await paypal.Googlepay().confirmOrder({
        orderId: id,
        paymentMethodData: paymentData.paymentMethodData
      });

      if (confirmOrderResponse.status === "APPROVED") {
        const captureResponse = await fetch(`/capture/${id}`, { method: "POST" });

        if (!captureResponse.ok) throw new Error("Failed to capture payment");

        const captureData = await captureResponse.json();

        if (captureData.capture.status === "COMPLETED") {
          resolve({ transactionState: "SUCCESS" });
        } else {
          reject({
            transactionState: "ERROR",
            error: { intent: "PAYMENT_AUTHORIZATION", message: "Transaction failed" }
          });
        }
      } else {
        reject({
          transactionState: "ERROR",
          error: { intent: "PAYMENT_AUTHORIZATION", message: "Transaction not approved" }
        });
      }
    } catch (err) {
      reject({
        transactionState: "ERROR",
        error: { intent: "PAYMENT_AUTHORIZATION", message: err.message }
      });
    }
  });
}

4. Improve 'onGooglePayLoaded()'.
   a. Fix any probable race conditions: Ensure that 'getGooglePaymentsClient()' is only called when Google is defined.
   b. Catch startup failures.
   ```javascript
    async function onGooglePayLoaded() {
       try {
         if (!google || !paypal.Googlepay) throw new Error("Google Pay SDK not loaded");

    const paymentsClient = getGooglePaymentsClient();
    const isReadyToPayResponse = await paymentsClient.isReadyToPay(isReadyToPayRequest);
    
    if (isReadyToPayResponse.result) {
      addGooglePayButton();
    } else {
      console.warn("Google Pay is not supported on this device or browser.");
    }
  } catch (error) {
    console.error("Error initializing Google Pay:", error);
  }
}

**Conclusion:**
Added error handling to detect API call failures. 
To deep copy, 'structuredClone(baseRequest)' was used instead of 'Object.assign()'. 
Improved logging for easier debugging. 
'processPayment()' has been optimized to correctly reject unsuccessful transactions.

For more information on **full code**, **SCA (Strong Customer Authentication)**, **Test Integration**, and **Go Live** see [https://developer.paypal.com/docs/checkout/apm/google-pay/](#https://developer.paypal.com/docs/checkout/apm/google-pay/), Paypal Developer Guide.

Reference
Ericsson.com
Privacy
Cookies
Support
Legal
Contact
